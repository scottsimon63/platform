<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_snc_platform.validate_field</name>
        <script><![CDATA[var x_snc_platform = x_snc_platform || {};

x_snc_platform.validate_field = (function() {
	"use strict";

/* set your private variables and functions here. For example: 
	var privateVar = 0; 
	function private_function() {
		return ++privateVar;
	}
*/

/* Share variables between multiple UI scripts by adding them to your scope object. For example: 
	x_snc_platform.sharedVar = 0; 

 Then access them in your scripts the same way. For example: 
	function get_shared() {
		return x_snc_platform.sharedVar;
	}
*/
	function failureAction (control, message) {
		alert(message);
		//control.setValue('');
		setTimeout(function(){control.focus();}, 1);	
	}

	return {

/* set your public API here. For example:
		incrementAndReturnPrivateVar: function() {
			return private_function();
		},
*/

		/**
 * checkNumber
*/
	checkNumber : function(control, number) {
		if(isNaN(number)) {
			failureAction(control, "This Field Must be a Number");
		}
	},

	checkNumberRange : function(control, number, srange, erange) {
		if(isNaN(number)) {
			failureAction(control, "This Field Must be a Number");
		} else {
			if (number <= srange || number >= erange) {
			failureAction(control, "This Number Must be in Range of " + srange + " and " + erange);			
			}
		}
	},

	/**
	 * checkDate
	*/

	checkDate : function(control, date) {
		 var format = g_user_date_format; //format is currently MM-dd-yyyy
		 var checkDate = getDateFromFormat(date, format) != 0;

		 if(checkDate == 0)
		 {
			failureAction(control, "Invalid format, must be '"+ format+"', or use calendar icon to add date!");
		 }
	},
	

	checkDateGT : function(control, LTdate, GTdate) {
	 var format = g_user_date_format; //format is currently MM-dd-yyyy
	 var checkDate = getDateFromFormat(LTdate, format) != 0;

     if (LTdate != '') {	
		 if(checkDate == 0)
		 {
			failureAction(control, "Invalid format, must be '"+ format+"', or use calendar icon to add date!");
			return;
		 }
	 }
	 
	 if (GTdate != '') {
		 checkDate = getDateFromFormat(GTdate, format) != 0;
		 
		 if(checkDate == 0)
		 {
			failureAction(control, "Invalid format, must be '"+ format+"', or use calendar icon to add date!");
			return;
		 }
	 }
	
     if (LTdate != '' && GTdate != '') {
		 if(LTdate > GTdate) {
			failureAction(control, "Dates are valid, but " + GTdate + " must be greater than " + LTdate);		 
		 }
	 }
},

checkDateTime : function(control, value) {
	//var value = "22.05.2013 11:23:22";	
	//var matches = value.match(/^(\d{2})\-(\d{2})\-(\d{4}) (\d{2}):(\d{2}):(\d{2}) [APap][mM]$/);
	var matches = value.match(/^(((0[13578]|1[02])[\/\.-](0[1-9]|[12]\d|3[01])[\/\.-]((19|[2-9]\d)\d{2})\s(0[0-9]|1[0-2]):(0[0-9]|[1-59]\d):(0[0-9]|[1-59]\d)\s(AM|am|PM|pm))|((0[13456789]|1[012])[\/\.-](0[1-9]|[12]\d|30)[\/\.-]((19|[2-9]\d)\d{2})\s(0[0-9]|1[0-2]):(0[0-9]|[1-59]\d):(0[0-9]|[1-59]\d)\s(AM|am|PM|pm))|((02)[\/\.-](0[1-9]|1\d|2[0-8])[\/\.-]((19|[2-9]\d)\d{2})\s(0[0-9]|1[0-2]):(0[0-9]|[1-59]\d):(0[0-9]|[1-59]\d)\s(AM|am|PM|pm))|((02)[\/\.-](29)[\/\.-]((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))\s(0[0-9]|1[0-2]):(0[0-9]|[1-59]\d):(0[0-9]|[1-59]\d)\s(AM|am|PM|pm)))$/g);
	
	//alt:
	// value.match(/^(\d{2}).(\d{2}).(\d{4}).(\d{2}).(\d{2}).(\d{2})$/);
	// also matches 22/05/2013 11:23:22 and 22a0592013,11@23a22
	if (matches === null) {
		failureAction(control, "Invalid Date Time Format - format must be dd-mm-yyyy hh:mm:ss AM|PM");  
	} 
},

checkDateTimeGT : function(control, LTdate, GTdate) {
     if (LTdate != '' && GTdate != '') {
		 if(LTdate > GTdate) {
			failureAction(control, "Dates are valid, but " + GTdate + " must be greater than " + LTdate);		 
		 }
	 }
},

/**
 * checkPhone
*/

checkPhone : function(control, phone) {
   //var pattern = /^[0-9]{3}\-[0-9]{3}\-[0-9]{4}$/;
   var pattern = /^\(?[0-9]{3}(\-|\)) ?[0-9]{3}-[0-9]{4}$/;
	
   if (!pattern.test(phone)) { 
	  failureAction(control, "Invalid Phone Format - format must be 999-999-9999 or (999) 999-9999");  
   }
},
		
		
	checkEmail : function(control, email) {

	   var pattern = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	   if (!pattern.test(email)) { 
		  failureAction(control, "Invalid Email Address");
	   }
	},
			
		type:  "validate_field"
	};
})();
]]></script>
        <script_name>validate_field</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>scott.simon</sys_created_by>
        <sys_created_on>2017-03-30 21:09:23</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>3dda8e4edb31f240c20354c0cf9619a7</sys_id>
        <sys_mod_count>24</sys_mod_count>
        <sys_name>x_snc_platform.validate_field</sys_name>
        <sys_package display_value="Platform" source="x_snc_platform">d6715350db31fe0070c8f52ebf961997</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Platform">d6715350db31fe0070c8f52ebf961997</sys_scope>
        <sys_update_name>sys_ui_script_3dda8e4edb31f240c20354c0cf9619a7</sys_update_name>
        <sys_updated_by>scott.simon</sys_updated_by>
        <sys_updated_on>2017-04-11 12:46:54</sys_updated_on>
        <use_scoped_format>true</use_scoped_format>
    </sys_ui_script>
</record_update>
